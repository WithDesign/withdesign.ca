////
/// Helpers
/// @group tools
////

/// @name Prefix Utility
/// @param $property - CSS property
/// @param $experssion - The expressions for the CSS property
/// @param $usage - Defines where the perfix will be placed - More cases can be created if required
/// @param $prefix - Defines the prefix map that generates the proper prefixs
/// @outputs required prefixed styles

@mixin prefix($property, $expression, $usage: property, $prefix: get('prefix')) {
  @if $usage == property {
    @each $key, $browser-prefix in $prefix {
      #{$browser-prefix}#{$property}: unquote(#{$expression});
    }
  } @else if $usage == expression {
    @each $key, $browser-prefix in $prefix {
      #{$property}: $browser-prefix + unquote(#{$expression});
    }
  } @else {
    @error '`#{$usage}` is not a proper placement for the prefix';
  }
  #{$property}: unquote(#{$expression});
}

/// @name Cross Browser Opacity
/// Ensures older ie is supported
/// @param {intiger} $opacity
/// @outputs opacity properties

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity = $opacity-ie);
}

/// @name Generates Calc Kits
/// Generates the calc function
/// @param {intiger} $property - The css property ie width or height
/// @param {intiger} $default - fallback value if calc is not supported
/// @param {string} $expression - the calc expression
/// @param {string} $important - add `important` to make calc important
/// @outputs calc properties
/// @example
//    @include calc(width, 98%, "100% - 50px");

@mixin calc($property, $default, $expression, $important: null) {
  #{$property}: $default $important;
  #{$property}: -webkit-calc(#{$expression}) $important;
  #{$property}: -moz-calc(#{$expression}) $important;
  #{$property}: calc(#{$expression}) $important;
}

/// @name Filter Prefix
/// @param {property} $args - A string of properties
/// @outputs filter properties

@mixin filter($args) {
  @include prefix(filter, $args);
}

/// @name White Space Prefix
/// @param {property} $args - A string of properties
/// @outputs White-space properties

@mixin white-space($args) {
  @include prefix(white-space, $args);
}

/// @name Placeholder Text Styler
/// @content Properties for placeholder on an input
/// @outputs Placeholder prefixed

@mixin input-placeholder {
  &.placeholder { @content; }
  &:-moz-placeholder { @content; }
  &::-moz-placeholder { @content; }
  &:-ms-input-placeholder { @content; }
  &::-webkit-input-placeholder { @content; }
}

/// @name Z-index Handler
/// z-index levels created by $z-index-level var within active
/// @param {key} $arg - reference to $z-index-level
/// @outputs Placeholder prefixed
/// @see $z-index-level

@mixin z-index($arg, $important: null) {
  $z-index-level: get('z-index');
  @if map-has-key($z-index-level, $arg) {
    z-index: map-get($z-index-level, $arg) $important;
  } @else {
    @error '#{$arg} is not a z-index level';
  }
}

/// @name Appearance Prefix
/// @param {property} $args - A string of properties
/// @outputs appearance properties

@mixin appearance($args) {
  @include prefix(appearance, $args);
}

/// @name Visibility Prefix
/// @param {property} $args - A string of properties
/// @outputs appearance properties

@mixin visibility($args: hidden) {
  @include prefix(backface-visibility, $args);
}

/// @name Create Css Properties from a map
/// @param {Map} $map-of-properties - key is the propety, value is the property value
/// @outputs properties
@mixin create-properties($map-of-properties) {
  @each $key, $value in $map-of-properties {
    #{$key}: #{$value};
  }
}

//-------------------------------------------------------------------------------------
// Angled Edges v2.0.0 (https://github.com/josephfusco/angled-edges)
// Copyright 2017 Joseph Fusco
// Licensed under MIT (https://github.com/josephfusco/angled-edges/blob/master/LICENSE)
//-------------------------------------------------------------------------------------

/// Replace `$search` with `$replace` in `$string`.
///
/// @author Hugo Giraudel
/// @link   http://www.sassmeister.com/gist/1b4f2da5527830088e4d
///
/// @param  {String}  $string - Initial string
/// @param  {String}  $search - Substring to replace
/// @param  {String}  $replace ('') - New value
/// @return {String}  Updated string
///
@function ae-str-replace($string, $search, $replace: '') {
	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + ae-str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}

	@return $string;
}

/// Encode SVG to use as background.
/// @param  {String}  $string
/// @return {String}  Encoded svg data
///
@function ae-svg-encode($string){
	$result: ae-str-replace($string, '<svg', '<svg xmlns="http://www.w3.org/2000/svg"');
	$result: ae-str-replace($result, '%', '%25');
	$result: ae-str-replace($result, '"', '\'');
	$result: ae-str-replace($result, '<', '%3C');
	$result: ae-str-replace($result, '>', '%3E');

	@return 'data:image/svg+xml,' + $result;
}

/// Outputs pseudo content for main mixin.
/// @param  {String}  $location
/// @param  {Number}  $height
/// @output psuedo content
///
@mixin ae-pseudo($wedge, $height, $width) {
	background-image: url($wedge);
	background-position: center center;
	background-repeat: no-repeat;

	// full width wedge - needed as Firefox ignores preserveAspectRatio="none" in this case
	@if ($width == null) {
		background-size: 100% 100%;
	}

	content: '';
  height: $height * 1px;
	left: 0;
	position: absolute;
	right: 0;
	width: 100%;
	z-index: -1;
}

/// Attatches an svg wedge shape to an element.
/// @param  {String}  $location   - 'inside top', 'outside top', 'inside bottom', 'outside bottom'
/// @param  {String}  $hypotenuse - 'upper left', 'upper right', 'lower left', 'lower right'
/// @param  {Color}   $fill
/// @param  {Number}  $height
/// @param  {Number}  $width
/// @output '::before' and/or '::after' with svg background image
///
@mixin angled-edge($location, $hypotenuse, $fill, $height: 100, $width: null) {

	position: relative;

	$points: (
		'upper left': '0,#{$height} #{$width},#{$height} #{$width},0',
		'upper right': '0,#{$height} #{$width},#{$height} 0,0',
		'lower left': '0,0 #{$width},#{$height} #{$width},0',
		'lower right': '0,0 #{$width},0 0,#{$height}'
	);

	// full width wedge
	@if ($width == null) {
		$points: (
			'upper left': '0,#{$height} 100,#{$height} 100,0',
			'upper right': '0,#{$height} 100,#{$height} 0,0',
			'lower left': '0,0 100,#{$height} 100,0',
			'lower right': '0,0 100,0 0,#{$height}'
		);
	}

	// ensure $fill color is using rgb()
	$fill-rgb: 'rgb(' + round(red($fill)) + ',' + round(green($fill)) + ',' + round(blue($fill)) + ')';

	// capture alpha component of $fill to use with fill-opacity
	$fill-alpha: alpha($fill);

	$wedge: '<svg width="#{$width}" height="#{$height}" fill="#{$fill-rgb}" fill-opacity="#{$fill-alpha}"><polygon points="#{map-get($points, $hypotenuse)}"></polygon></svg>';

	// full width wedge
	@if ($width == null) {
		$wedge: '<svg preserveAspectRatio="none" viewBox="0 0 100 #{$height}" fill="#{$fill-rgb}" fill-opacity="#{$fill-alpha}"><polygon points="#{map-get($points, $hypotenuse)}"></polygon></svg>';
	}

	$encoded-wedge: ae-svg-encode($wedge);

	@if ($location == 'inside top') {
		&::before {
			@include ae-pseudo($encoded-wedge, $height, $width);
			top: 0;
		}
	} @else if ($location == 'outside top') {
		&::before {
			@include ae-pseudo($encoded-wedge, $height, $width);
			top: -$height * 1px;
		}
	} @else if ($location == 'inside bottom') {
		&::after {
			@include ae-pseudo($encoded-wedge, $height, $width);
			bottom: 0;
		}
	} @else if ($location == 'outside bottom') {
		&::after {
			@include ae-pseudo($encoded-wedge, $height, $width);
			bottom: -$height * 1px;
		}
	} @else {
		@error 'Invalid argument for $location - must use: `inside top`, `outside top`, `inside bottom`, `outside bottom`';
	}
	@if (map-has-key($points, $hypotenuse) == false) {
		@error 'Invalid argument for $hypotenuse - must use: `upper left`, `upper right`, `lower left`, `lower right`';
	}
}
